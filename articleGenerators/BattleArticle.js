module.exports = class BattleArticle{
    constructor(firstOpponent, secondOpponent, id, bot){
        this._battleId = null;
        this._id = id;
        this._selectedRewardId = 0;
        this._firstOpponent = firstOpponent;
        this._secondOpponent = secondOpponent;
        this._bot = bot;
        this._step = 0;
        this._hp = 100;
        this._winner = firstOpponent;
        this._articleId = null;
        this._history = [];
        this._currentActor = firstOpponent;
        this._nextActor = secondOpponent;
        this._battleMessage = {
            reply_markup:{
                inline_keyboard:[
                    [
                        {text: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ {weaponName}', callback_data: '{"q": "battle_control", "a": "weapon"}'},
                    ],
                    [
                        {text: '–ù–∞–≤–∏—á–∫–∏', callback_data: '{"q": "battle_control", "a": "skills"}'},
                        {text: '–ü—Ä–µ–¥–º–µ—Ç–∏', callback_data: '{"q": "battle_control", "a": "items"}'},
                    ],
                    [
                        {text: '–£–∫–ª–æ–Ω–∏—Ç–∏—Å—å (probability)', callback_data: '{"q": "battle_control", "a": "dodge"}'},
                        
                    ],
                    [
                        {text: '–í—Ç—ñ–∫—Ç–∏ (probability)', callback_data: '{"q": "battle_control", "a": "escape"}'}
                    ]
                ]
            },
        }
        this._endMessage = {
            input_message_content:{
                message_text:
`<b>[${this.title}]</b> [–ü–µ—Ä–µ–º–æ–≥–∞!]
–ü–æ–±—ñ–¥—ñ—Ç—ñ–ª—å: ${this.winnerName}
--------------------–ù–∞–≥–æ—Ä–æ–¥–∞--------------------
${this.award}
`,
                parse_mode: 'HTML'
            },
            reply_markup:{
                inline_keyboard:[
                    [
                        {text: '‚¨ÜÔ∏è', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: '‚¨áÔ∏è', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "take"}'},
                    ],
                    [
                        {text: '‚úãü§ö –í–∑—è—Ç–∏ –≤—Å–µ', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                    ],
                    [
                        {text: 'üö™ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–π', callback_data: '{"q": "battle_control", "a": "end"}'},
                    ]
                ]
            },
        }
        this._article = {
            input_message_content: this._battleMessage.input_message_content,
            reply_markup: this._battleMessage.reply_markup,
        };
    }

    get winner(){
        return this._winner;
    }

    get battleStage(){

    }

    get resultsStage(){

    }

    get _selectedRewardSymbol(){
        return `ü´¥`;
    }

    get history(){
        return this._history;
    }

    get title(){
        return '–ó–∞–≥–æ–ª–æ–≤–æ–∫'
    }

    get step(){
        return `–®–∞–≥ 1`
    }

    get articleId(){
        return this._articleId;
    }

    get unconditionalRewards(){
        return ['50xp', '100üí∞']
    }

    get conditionalRewards(){
        return ['–†–≤–∞–Ω–∏–π –±–æ—Ç—ñ–Ω–æ–∫', '–ü–∞–ª–∫–∞']
    }

    get selectedRewardId(){
        return this._selectedRewardId;
    }

    get award(){
        let unconditionalRewards = ``;
        this.unconditionalRewards.forEach((reward, index) =>{
            unconditionalRewards += `${reward}
`});
        let conditionalRewards = ``;
        this.conditionalRewards.forEach((reward, index) =>{
            if(this.selectedRewardId == index){
                conditionalRewards += this._selectedRewardSymbol;
            }
            conditionalRewards += `${reward}
`
        });

        let rewardMessage = `${unconditionalRewards}
---–ü—Ä–µ–¥–º–µ—Ç–∏---
${conditionalRewards}`

        return rewardMessage;
    }

    set step(step){
        this._step = step;
    }

    set firstOpponent(us){
        this._firstOpponent = us;
    }

    get historyLastActions(){
        return this.history
    }

    get currentActor(){
        return this._currentActor;
    }

    get nextActor(){
        return this._nextActor;
    }

    set nextActor(next){
        this._nextActor = next;
    }

    set currentActor(currentActor){
        this._currentActor = currentActor;
    }

    formArticleText(){
        return `<b>[${this.title}]</b> [–ö—Ä–æ–∫: ${this._step}]
–î–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –∫—Ä–æ–∫–∞: 01:00
${this.currentActor.name == this._firstOpponent.name ? 'üî∏' : ''} [${this._firstOpponent.lvl}] ${this._firstOpponent.name} [${this._firstOpponent.hp}/${this._firstOpponent.maxHP}]‚ù§Ô∏è
${this.currentActor.name == this._secondOpponent.name ? 'üî∏' : ''} [${this._secondOpponent.lvl}] ${this._secondOpponent.name} [${this._secondOpponent.hp}/${this._secondOpponent.maxHP}]‚ù§Ô∏è
--------------------–ü–æ–¥—ñ—ó--------------------
${this.history.slice(-5).map(el => `${el}\n`).join('')}`;
    }

    updateMessage(){
        this._bot.editMessageText(
            this.formArticleText(), 
            {inline_message_id: this._id, parse_mode: "HTML", reply_markup:{
                inline_keyboard:[
                    [
                        {text: `ü´Å –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: 100/100`, callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: `${this.nextActor.name} [${this.nextActor.hp}/${this.nextActor.maxHP}]`, callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: '‚ö™Ô∏è', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üòê', callback_data: '{"q": "award_control", "a": "down"}'},
                        {text: '‚ö™Ô∏è', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'üó°', callback_data: '{"q": "award_control", "a": "take"}'},
                        {text: '‚ù§Ô∏è', callback_data: '{"q": "award_control", "a": "take"}'},
                        {text: 'üõ°', callback_data: '{"q": "award_control", "a": "take"}'},
                    ],
                    [
                        {text: '‚ö™Ô∏è', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                        {text: 'ü¶µü¶µ', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                        {text: '‚ö™Ô∏è', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                    ],
                    [
                        {text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: '{"q": "battle_control", "a": "end"}'},
                    ]

                    // [
                    //     {text: `ü´Å –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: 100/100`, callback_data: '{"q": "award_control", "a": "down"}'},
                    // ],
                    // [
                    //     {text: `‚ùáÔ∏è –ï—Ñ–µ–∫—Ç–∏`, callback_data: '{"q": "award_control", "a": "down"}'},
                    //     {text: `‚ùî –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏`, callback_data: '{"q": "award_control", "a": "down"}'},
                    // ],
                    // [
                    //     {text: 'üó° –ú–µ—á —Ö—Ä—è–∫–∞', callback_data: '{"q": "award_control", "a": "up"}'},
                    //     {text: 'üõ° –©—ñ—Ç "–û—É"', callback_data: '{"q": "award_control", "a": "down"}'},
                    // ],
                    // [
                    //     {text: '‚ú® –í–º—ñ–Ω–Ω—è', callback_data: '{"q": "award_control", "a": "take"}'},
                    // ],
                    // [
                    //     {text: 'üß™ –ó—ñ–ª–ª—è', callback_data: '{"q": "award_control", "a": "up"}'},
                    //     {text: 'üëù –ü—Ä–µ–¥–º–µ—Ç–∏', callback_data: '{"q": "award_control", "a": "take"}'},
                    // ],
                    // [
                    //     {text: 'üèÉ –í—Ç—ñ–∫—Ç–∏ (33%)', callback_data: '{"q": "battle_control", "a": "end"}'},
                    //     {text: 'üö™ –ó–¥–∞—Ç–∏—Å—å', callback_data: '{"q": "battle_control", "a": "end"}'},
                    // ]
                ]
            },});
    }

    updateEndMessage(){
        this._bot.editMessageText(
            this.formEndGameMessageText(), 
            {inline_message_id: this._id, parse_mode: "HTML", reply_markup:{
                inline_keyboard:[
                    [
                        {text: '–°–¢–û–†–Ü–ù–ö–ê 1 –Ü–ó 5', callback_data: '{"q": "award_control", "a": "up"}'},
                    ],
                    [
                        {text: 'üó° –ú–ï–ß –°–õ–ê–í–ò', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'üëû –†–í–ê–ù–ò–ô –ë–û–¢–Ü–ù–û–ö –Ü–°–¢–Ü–ù–ò', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'ü™° –Ü–ì–õ–ê –ö–û–©–Ñ–Ø', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'ü™ñ –®–õ–Ñ–ú –ì–û–õ–û–í–ê–°–¢–Ü–ö–ê', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'üß¢ –ö–Ñ–ü–ö–ê –ü–Ü–î–ê–†–ê–®–ö–ò', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: '‚¨ÖÔ∏è', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                        {text: '‚û°Ô∏è', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                    ],
                    [
                        {text: '‚úãü§ö –í–∑—è—Ç–∏ –≤—Å–µ', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                    ],
                    [
                        {text: 'üö™ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–π', callback_data: '{"q": "battle_control", "a": "end"}'},
                    ]
                ]
            },});
    }

    formEndGameMessageText(){
        return `<b>[${this.title}]</b>
–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: [${this.winner.lvl}] ${this.winner.name} [${this.winner.hp}/${this.winner.maxHP}]‚ù§Ô∏è!
--------------------–ù–∞–≥–æ—Ä–æ–¥–∞--------------------
$unconditionalReward
`
    }

    appendToHistory(text){
        this._history.push(text)
    }
}

// `[–û–≥—Ä–∞–±–ª—î–Ω—ñ—î]
// üî∏ [${firstOpponent.hero.lvl}] ${firstOpponent.hero.name} [${firstOpponent.hero.currentHP}/${firstOpponent.hero.maxHP}]‚ù§Ô∏è
// üåÄ [1] –Ø—â—é—Ä [40/50]‚ù§Ô∏è 
// --------------------–î—ñ—ó--------------------
// –ë–æ–π—á—ñ–Ω–∫–æ: –í–¥–∞—Ä–∏–≤ [–º–µ—á 1000 —ñ—Å—Ç–∏–Ω] –≤ –≥—Ä—É–¥–∏
// –Ø—â—ñ—Ä: –û—Ç—Ä–∏–º–∞–≤ 10 —É—Ä–æ–Ω–∞
// –Ø—â—ñ—Ä: –ó–Ω–µ–ø—Ä–∏—Ç–æ–º–Ω—ñ–≤
// `