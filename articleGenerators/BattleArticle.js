const user = require("../models/user");
const Battle = require("../class/Battle");

module.exports = class BattleArticle{
    constructor(user, secondOpponent, id, bot){
        this._battleId = null;
        this._id = id;
        this._selectedRewardId = 0;
        this._user = user;
        this._secondOpponent = secondOpponent;
        this._bot = bot;
        this._step = 0;
        this._hp = 100;
        this._articleId = null;
        this._battleMessage = {
            reply_markup:{
                inline_keyboard:[
                    [
                        {text: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ {weaponName}', callback_data: '{"q": "battle_control", "a": "weapon"}'},
                    ],
                    [
                        {text: '–ù–∞–≤–∏—á–∫–∏', callback_data: '{"q": "battle_control", "a": "skills"}'},
                        {text: '–ü—Ä–µ–¥–º–µ—Ç–∏', callback_data: '{"q": "battle_control", "a": "items"}'},
                    ],
                    [
                        {text: '–£–∫–ª–æ–Ω–∏—Ç–∏—Å—å (probability)', callback_data: '{"q": "battle_control", "a": "dodge"}'},
                        
                    ],
                    [
                        {text: '–í—Ç—ñ–∫—Ç–∏ (probability)', callback_data: '{"q": "battle_control", "a": "escape"}'}
                    ]
                ]
            },
        }
        this._endMessage = {
            input_message_content:{
                message_text:
`<b>[${this.title}]</b> [–ü–µ—Ä–µ–º–æ–≥–∞!]
–ü–æ–±—ñ–¥—ñ—Ç—ñ–ª—å: ${this.winnerName}
--------------------–ù–∞–≥–æ—Ä–æ–¥–∞--------------------
${this.award}
`,
                parse_mode: 'HTML'
            },
            reply_markup:{
                inline_keyboard:[
                    [
                        {text: '‚¨ÜÔ∏è', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: '‚¨áÔ∏è', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "take"}'},
                    ],
                    [
                        {text: '‚úãü§ö –í–∑—è—Ç–∏ –≤—Å–µ', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                    ],
                    [
                        {text: 'üö™ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–π', callback_data: '{"q": "battle_control", "a": "end"}'},
                    ]
                ]
            },
        }
        this._article = {
            input_message_content: this._battleMessage.input_message_content,
            reply_markup: this._battleMessage.reply_markup,
        };
    }

    get winnerName(){
        return this._user.hero.name;
    }

    get battleStage(){

    }

    get resultsStage(){

    }

    get _selectedRewardSymbol(){
        return `ü´¥`;
    }

    get history(){
        return '–¢—É—Ç –±—É–¥–µ —ñ—Å—Ç–æ—Ä—ñ—è'
    }

    get title(){
        return '–ó–∞–≥–æ–ª–æ–≤–æ–∫'
    }

    get step(){
        return `–®–∞–≥ 1`
    }

    get articleId(){
        return this._articleId;
    }

    get unconditionalRewards(){
        return ['50xp', '100üí∞']
    }

    get conditionalRewards(){
        return ['–†–≤–∞–Ω–∏–π –±–æ—Ç—ñ–Ω–æ–∫', '–ü–∞–ª–∫–∞']
    }

    get selectedRewardId(){
        return this._selectedRewardId;
    }

    get award(){
        let unconditionalRewards = ``;
        this.unconditionalRewards.forEach((reward, index) =>{
            unconditionalRewards += `${reward}
`});
        let conditionalRewards = ``;
        this.conditionalRewards.forEach((reward, index) =>{
            if(this.selectedRewardId == index){
                conditionalRewards += this._selectedRewardSymbol;
            }
            conditionalRewards += `${reward}
`
        });

        let rewardMessage = `${unconditionalRewards}
---–ü—Ä–µ–¥–º–µ—Ç–∏---
${conditionalRewards}`

        return rewardMessage;
    }

    // get(){
    //     return this._article;
    // }

    set step(step){
        this._step = step;
    }

    set user(us){
        this._user = us;
    }

    formArticleText(){
        return `<b>[${this.title}]</b> [–ö—Ä–æ–∫: ${this._step}]
[${this._user.lvl}] ${this._user.name} [${this._user.hp}/${this._user.maxHP}]‚ù§Ô∏è
[${this._secondOpponent.lvl}] ${this._secondOpponent.name} [${this._secondOpponent.hp}/${this._secondOpponent.maxHP}]‚ù§Ô∏è
--------------------–ü–æ–¥—ñ—ó--------------------
${this.history}`;
    }

    updateMessage(){
        this._bot.editMessageText(
            this.formArticleText(), 
            {inline_message_id: this._id, parse_mode: "HTML"});
    }
}

// `[–û–≥—Ä–∞–±–ª—î–Ω—ñ—î]
// üî∏ [${user.hero.lvl}] ${user.hero.name} [${user.hero.currentHP}/${user.hero.maxHP}]‚ù§Ô∏è
// üåÄ [1] –Ø—â—é—Ä [40/50]‚ù§Ô∏è 
// --------------------–î—ñ—ó--------------------
// –ë–æ–π—á—ñ–Ω–∫–æ: –í–¥–∞—Ä–∏–≤ [–º–µ—á 1000 —ñ—Å—Ç–∏–Ω] –≤ –≥—Ä—É–¥–∏
// –Ø—â—ñ—Ä: –û—Ç—Ä–∏–º–∞–≤ 10 —É—Ä–æ–Ω–∞
// –Ø—â—ñ—Ä: –ó–Ω–µ–ø—Ä–∏—Ç–æ–º–Ω—ñ–≤
// `