module.exports = class BattleArticle{
    constructor(firstOpponent, secondOpponent, id, bot){
        this._battleId = null;
        this._id = id;
        this._selectedRewardId = 0;
        this._firstOpponent = firstOpponent;
        this._secondOpponent = secondOpponent;
        this._bot = bot;
        this._step = 0;
        this._hp = 100;
        this._winner = firstOpponent;
        this._articleId = null;
        this._history = [];
        this._currentActor = firstOpponent;
        this._nextActor = secondOpponent;
        this._currentBattleMessageFuncton =  this.formBattleText;
        this._currentBattleMarkupFunction = this.formMainBattleButtons;
        this._mainBattleMarkup = {
            reply_markup:{
                inline_keyboard:[
                    [
                        {text: `ü´Å –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${this._currentActor.stamina}/${this._currentActor.maxStamina}`, callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: `‚ùáÔ∏è –ï—Ñ–µ–∫—Ç–∏`, callback_data: '{"q": "main_battle", "a": "effects"}'},
                        {text: `‚ùî –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏`, callback_data: '{"q": "main_battle", "a": "charact"}'},
                    ],
                    [
                        {text: 'üó° –ú–µ—á —Ö—Ä—è–∫–∞', callback_data: '{"q": "main_battle", "a": "weapon"}'},
                        {text: 'üõ° –©—ñ—Ç "–û—É"', callback_data: '{"q": "main_battle", "a": "left_hand"}'},
                    ],
                    [
                        {text: '‚ú® –í–º—ñ–Ω–Ω—è', callback_data: '{"q": "main_battle", "a": "skills"}'},
                    ],
                    [
                        {text: 'üß™ –ó—ñ–ª–ª—è', callback_data: '{"q": "main_battle", "a": "up"}'},
                        {text: 'üëù –ü—Ä–µ–¥–º–µ—Ç–∏', callback_data: '{"q": "main_battle", "a": "take"}'},
                    ],
                    [
                        {text: '‚òëÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫—Ä–æ–∫', callback_data: '{"q": "main_battle", "a": "end_step"}'},
                    ],
                    [
                        {text: 'üèÉ –í—Ç–µ–∫—Ç–∏ (33%)', callback_data: '{"q": "main_battle", "a": "run"}'},
                        {text: 'üö™ –ó–¥–∞—Ç–∏—Å—å', callback_data: '{"q": "main_battle", "a": "surrender"}'},
                    ]
                ]
            }
        }
        this._limbBattleMessage = {
            reply_markup:{
                inline_keyboard:[
                    [
                        {text: `–ó–∞—Ä–∞–∑ —Ö–æ–¥–∏—Ç—å: ${this._currentActor.name}`, callback_data: '{"q": "award_control", "a": ""}'},
                    ],
                    [
                        {text: `ü´Å –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${this._currentActor.stamina}/${this._currentActor.maxStamina}`, callback_data: ''},
                    ],
                    [
                        {text: '‚òëÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫—Ä–æ–∫', callback_data: '{"q": "main_battle", "a": "end_step"}'},
                    ],
                    [
                        {text: `–¢–≤—ñ–π –≤–æ—Ä–æ–≥: ${this.nextActor.name} [${this.nextActor.hp}/${this.nextActor.maxHP}]`},
                    ],
                    [
                        {text: '', callback_data: ''},
                        {text: 'üòê', callback_data: ''},
                        {text: '', callback_data: ''},
                    ],
                    [
                        {text: 'üó°', callback_data: '{"q": "award_control", "a": "take"}'},
                        {text: '‚ù§Ô∏è', callback_data: '{"q": "award_control", "a": "take"}'},
                        {text: 'üõ°', callback_data: '{"q": "award_control", "a": "take"}'},
                    ],
                    [
                        {text: '', callback_data: ''},
                        {text: 'ü¶µü¶µ', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                        {text: '', callback_data: ''},
                    ],
                    [
                        {text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: '{"q": "battle_control", "a": "end"}'},
                    ],
                ]
            }
        }
        this._endMessageText = {
            input_message_content:{
                message_text:
`<b>[${this.title}]</b> [–ü–µ—Ä–µ–º–æ–≥–∞!]
–ü–æ–±—ñ–¥—ñ—Ç—ñ–ª—å: ${this.winnerName}
--------------------–ù–∞–≥–æ—Ä–æ–¥–∞--------------------
${this.award}
`,
                parse_mode: 'HTML'
            },
            reply_markup:{
                inline_keyboard:[
                    [
                        {text: '‚¨ÜÔ∏è', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: '‚¨áÔ∏è', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "take"}'},
                    ],
                    [
                        {text: '‚úãü§ö –í–∑—è—Ç–∏ –≤—Å–µ', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                    ],
                    [
                        {text: 'üö™ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–π', callback_data: '{"q": "battle_control", "a": "end"}'},
                    ]
                ]
            },
        }
        this._article = {
            input_message_content: this.formBattleText(),
            reply_markup: this.formMainBattleButtons(),
        };
    }

    get winner(){
        return this._winner;
    }

    get battleStage(){

    }

    get resultsStage(){

    }

    get _selectedRewardSymbol(){
        return `ü´¥`;
    }

    get history(){
        return this._history;
    }

    get title(){
        return '–ó–∞–≥–æ–ª–æ–≤–æ–∫'
    }

    get step(){
        return `–®–∞–≥ 1`
    }

    get articleId(){
        return this._articleId;
    }

    get unconditionalRewards(){
        return ['50xp', '100üí∞']
    }

    get conditionalRewards(){
        return ['–†–≤–∞–Ω–∏–π –±–æ—Ç—ñ–Ω–æ–∫', '–ü–∞–ª–∫–∞']
    }

    get selectedRewardId(){
        return this._selectedRewardId;
    }

    get award(){
        let unconditionalRewards = ``;
        this.unconditionalRewards.forEach((reward, index) =>{
            unconditionalRewards += `${reward}
`});
        let conditionalRewards = ``;
        this.conditionalRewards.forEach((reward, index) =>{
            if(this.selectedRewardId == index){
                conditionalRewards += this._selectedRewardSymbol;
            }
            conditionalRewards += `${reward}
`
        });

        let rewardMessage = `${unconditionalRewards}
---–ü—Ä–µ–¥–º–µ—Ç–∏---
${conditionalRewards}`

        return rewardMessage;
    }

    set step(step){
        this._step = step;
    }

    set firstOpponent(us){
        this._firstOpponent = us;
    }

    get historyLastActions(){
        return this.history
    }

    get currentActor(){
        return this._currentActor;
    }

    get nextActor(){
        return this._nextActor;
    }

    set nextActor(next){
        this._nextActor = next;
    }

    set currentActor(currentActor){
        this._currentActor = currentActor;
    }

    selectMainBattleMenu(){

    }

    selectLimbMenu(){

    }

    selectEndMenu(){

    }

    getMainButtons(){
        // return 
    }
    
    init(){
        this._currentBattleMessageFuncton = this.formBattleText;
        this._currentBattleMarkupFunction = this.formMainBattleButtons;
        // updateMessage()
    }

    selectMarkupFunction(markupFunction){
        this._currentBattleMarkupFunction = markupFunction;
    }

    selectMessageFunction(messageFunction){
        this._currentBattleMessageFuncton = messageFunction;
    }

    formBattleText(){
        return `<b>[${this.title}]</b> [–ö—Ä–æ–∫: ${this._step}]
–î–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –∫—Ä–æ–∫–∞: 01:00
${this.currentActor.name == this._firstOpponent.name ? 'üî∏' : ''} [${this._firstOpponent.lvl}] ${this._firstOpponent.name} [${this._firstOpponent.hp}/${this._firstOpponent.maxHP}]‚ù§Ô∏è
${this.currentActor.name == this._secondOpponent.name ? 'üî∏' : ''} [${this._secondOpponent.lvl}] ${this._secondOpponent.name} [${this._secondOpponent.hp}/${this._secondOpponent.maxHP}]‚ù§Ô∏è
--------------------–ü–æ–¥—ñ—ó--------------------
${this.history.slice(-5).map(el => `${el}\n`).join('')}`;
    }

    formMainBattleButtons(){
        return {inline_keyboard:[
            [
                {text: `–ó–∞—Ä–∞–∑ —Ö–æ–¥–∏—Ç—å: ${this._currentActor.name}`, callback_data: '{"q": "award_control", "a": ""}'},
            ],
            [
                {text: `ü´Å –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${this._currentActor.stamina}/${this._currentActor.maxStamina}`, callback_data: '{"q": "award_control", "a": ""}'},
            ],
            [
                {text: '‚òëÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫—Ä–æ–∫', callback_data: '{"q": "main_battle", "a": "end_step"}'},
            ],
            [
                {text: 'üó° –ú–µ—á —Ö—Ä—è–∫–∞', callback_data: '{"q": "main_battle", "a": "weapon"}'},
                {text: 'üõ° –©—ñ—Ç "–û—É"', callback_data: '{"q": "main_battle", "a": "left_hand"}'},
            ],
            [
                {text: `‚ùáÔ∏è –°—Ç–∞–Ω`, callback_data: '{"q": "main_battle", "a": "status"}'},
                // {text: `‚ùî –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏`, callback_data: '{"q": "main_battle", "a": "charact"}'},
            ],
            //TODO:
            // [
            //     {text: '‚ú® –í–º—ñ–Ω–Ω—è', callback_data: '{"q": "main_battle", "a": "skills"}'},
            //     {text: 'üëù –ü—Ä–µ–¥–º–µ—Ç–∏', callback_data: '{"q": "main_battle", "a": "take"}'},
            // ],
            [
                {text: 'üèÉ –í—Ç–µ–∫—Ç–∏ (33%)', callback_data: '{"q": "main_battle", "a": "run"}'},
                {text: 'üö™ –ó–¥–∞—Ç–∏—Å—å', callback_data: '{"q": "main_battle", "a": "surrender"}'},
            ]
        ]};
    }

    formLimbBattleButtons(){
        return {
            inline_keyboard:[
                [
                    {text: `–ó–∞—Ä–∞–∑ —Ö–æ–¥–∏—Ç—å: ${this._currentActor.name}`, callback_data: 'null'},
                ],
                [
                    {text: `ü´Å –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${this._currentActor.stamina}/${this._currentActor.maxStamina}`, callback_data: 'null'},
                ],
                [
                    {text: '‚òëÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫—Ä–æ–∫', callback_data: '{"q": "main_battle", "a": "end_step"}'},
                ],
                [
                    // {text: `–¢–≤—ñ–π –≤–æ—Ä–æ–≥: ${this.nextActor.name} [${this.nextActor.hp}/${this.nextActor.maxHP}]`, callback_data: 'null'},
                    {text: `–í–¥–∞—Ä–∏—Ç–∏ ${this.nextActor.name}  [50ü´Å]: [${this.nextActor.hp}/${this.nextActor.maxHP}]‚ù§Ô∏è`, callback_data: 'null'},
                ],
                [
                    {text: ' ', callback_data: 'null'},
                    {text: 'üòê', callback_data: '{"q": "battle_control", "a": "att_head"}'},
                    {text: ' ', callback_data: 'null'},
                ],
                [
                    {text: 'üó°', callback_data: '{"q": "battle_control", "a": "att_rhand"}'},
                    {text: '‚ù§Ô∏è', callback_data: '{"q": "battle_control", "a": "att_ches"}'},
                    {text: 'üõ°', callback_data: '{"q": "battle_control", "a": "att_lhand"}'},
                ],
                [
                    {text: ' ', callback_data: 'null'},
                    {text: 'ü¶µü¶µ', callback_data: '{"q": "battle_control", "a": "att_leg"}'},
                    {text: ' ', callback_data: 'null'},
                ],
                [
                    {text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: '{"q": "battle_control", "a": "toMain"}'},
                ],
            ]
        }
    }

    formLimbFriendlyButtons(){
        return {
            inline_keyboard:[
                [
                    {text: `–ó–∞—Ä–∞–∑ —Ö–æ–¥–∏—Ç—å: ${this._currentActor.name}`, callback_data: 'null'},
                ],
                [
                    {text: `ü´Å –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${this._currentActor.stamina}/${this._currentActor.maxStamina}`, callback_data: 'null'},
                ],
                [
                    {text: '‚òëÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫—Ä–æ–∫', callback_data: '{"q": "main_battle", "a": "end_step"}'},
                ],
                [
                    {text: '–ë–ª–æ–∫—É–≤–∞—Ç–∏ [50ü´Å]:', callback_data: '{"q": "main_battle", "a": "end_step"}'},
                ],
                [
                    {text: ' ', callback_data: 'null'},
                    {text: 'üòê', callback_data: '{"q": "friendly_control", "a": "use_head"}'},
                    {text: ' ', callback_data: 'null'},
                ],
                [
                    {text: 'üó°', callback_data: '{"q": "friendly_control", "a": "use_rhand"}'},
                    {text: '‚ù§Ô∏è', callback_data: '{"q": "friendly_control", "a": "use_ches"}'},
                    {text: 'üõ°', callback_data: '{"q": "friendly_control", "a": "use_lhand"}'},
                ],
                [
                    {text: ' ', callback_data: 'null'},
                    {text: 'ü¶µü¶µ', callback_data: '{"q": "friendly_control", "a": "use_leg"}'},
                    {text: ' ', callback_data: 'null'},
                ],
                [
                    {text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: '{"q": "battle_control", "a": "toMain"}'},
                ],
            ]
        }
    }

    formToMenuButton(){
        return {inline_keyboard:[
            [
                {text: `–ó–∞—Ä–∞–∑ —Ö–æ–¥–∏—Ç—å: ${this._currentActor.name}`, callback_data: '{"q": "award_control", "a": ""}'},
            ],
            [
                {text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: '{"q": "battle_control", "a": "toMain"}'},
            ]
        ]}
    }

    formEffectsMessage(){
        return `–°—Ç–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ <b>${this._currentActor.name}</b>:
–ó–¥–æ—Ä–æ–≤'—è: ${this._currentActor.hp}/${this._currentActor.maxHP}‚ù§Ô∏è
–í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${this._currentActor.stamina}/${this._currentActor.maxStamina}ü´Å
–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∑–∞ –∫—Ä–æ–∫: +${this.currentActor.staminaRegenerateRate}ü´Å
–¢–æ—á–Ω—ñ—Å—Ç—å: ${this.currentActor.hitProbability}üéØ

–ü—Ä–∏–≥–æ–ª–æ–º—à–µ–Ω–∏–π üí´: ${this.currentActor.isStunned ? '–¢–∞–∫' : '–ù—ñ'}
–ö—Ä–æ–∫—ñ–≤ –¥–æ –∫—ñ–Ω—Ü—è –ø—Ä–∏–≥–æ–ª–æ–º—à–µ–Ω–Ω—è: ${this.currentActor.stunDuration}üë£

üòê –ó–∞—Ö–∏—Å—Ç –≥–æ–ª–æ–≤–∏: {–ù–ï –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û}üõ°
üí™üí™ –ó–∞—Ö–∏—Å—Ç —Ä—É–∫: {–ù–ï –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û}üõ°
‚ù§Ô∏è –ó–∞—Ö–∏—Å—Ç –≥—Ä—É–¥–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏: {–ù–ï –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û}üõ°
ü¶µü¶µ –ó–∞—Ö–∏—Å—Ç –Ω—ñ–≥: {–ù–ï –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û}üõ°

–ì–æ–ª–æ–≤–∞: ${this.currentActor.isHeadDamged ? '‚ùå' : '‚úÖ'}üòê
–ü—Ä–∞–≤–∞ —Ä—É–∫–∞: ${this.currentActor.isRightHandDamaged ? '‚ùå' : '‚úÖ'}üí™
–õ—ñ–≤–∞ —Ä—É–∫–∞: ${this.currentActor.isLeftHandDamaged ? '‚ùå' : '‚úÖ'}üí™
–ì—Ä—É–¥–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∞: ${this.currentActor.isChestDamaged ? '‚ùå' : '‚úÖ'}‚ù§Ô∏è
–ù–æ–≥–∏: ${this.currentActor.isLegsDamaged ? '‚ùå' : '‚úÖ'}ü¶µü¶µ

–ï—Ñ–µ–∫—Ç–∏:
‚ö™Ô∏è –í –¥–∞–Ω–∂—ñ
üü¢ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è (+5‚ù§Ô∏è –≤ —Å–µ–∫—É–Ω–¥—É)
üî¥ –ö—Ä–æ–≤–æ—Ç–µ—á–∞ (-5‚ù§Ô∏è –≤ —Å–µ–∫—É–Ω–¥—É)`
    }

    formSkillsButtons(){

    }

    formItemsButtons(){

    }

    formConfirmRunAwayButtons(){
        return {inline_keyboard:[
            [
                {text: `${this._currentActor.name}, —Ç–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—à –≤—Ç–µ–∫—Ç–∏ –∑ —à–∞–Ω—Å–æ–º 33%?`, callback_data: 'null'},
            ],
            [
                {text: 'üèÉ –í—Ç–µ–∫—Ç–∏ (33%)', callback_data: '{"q": "main_battle", "a": "surr_con"}'},
            ],
            [
                {text: '‚¨ÖÔ∏è –ù–µ —Ö–æ—á—É', callback_data: '{"q": "battle_control", "a": "toMain"}'},
            ]
        ]}
    }

    formConfirmSurrender(){
        return {inline_keyboard:[
            [
                {text: `${this._currentActor.name}, —Ç–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—à –∑–¥–∞—Ç–∏—Å—å?`, callback_data: 'null'},
            ],
            [
                {text: 'üö™ –ó–¥–∞—Ç–∏—Å—å', callback_data: '{"q": "main_battle", "a": "sur_con"}'},
            ],
            [
                {text: '‚¨ÖÔ∏è –ù–µ —Ö–æ—á—É', callback_data: '{"q": "battle_control", "a": "toMain"}'},
            ]
        ]}
    }

    formPassStepButtons(){

    }

    formAttackSelectButtons(){

    }


    updateMessage(){
        this._bot.editMessageText(
            this._currentBattleMessageFuncton(),
            {inline_message_id: this._id, parse_mode: "HTML", reply_markup: this._currentBattleMarkupFunction()});
    }

    // updateMessage(){
    //     this._bot.editMessageText(
    //         this.formArticleText(), 
    //         {inline_message_id: this._id, parse_mode: "HTML", reply_markup:{
    //             inline_keyboard:[
    //                 [
    //                     {text: `ü´Å –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${this.currentActor.stamina}/${this.currentActor.maxStamina}`, callback_data: '{"q": "award_control", "a": "down"}'},
    //                 ],
    //                 [
    //                     {text: `${this.nextActor.name} [${this.nextActor.hp}/${this.nextActor.maxHP}]`, callback_data: '{"q": "award_control", "a": "down"}'},
    //                 ],
    //                 [
    //                     {text: 'üó° [ü´Å 50]', callback_data: '{"q": "b_a", "a": "aut_att"}'},
    //                     {text: '*üó°* [ü´Å 100]', callback_data: '{"q": "b_a", "a": "str_att"}'},
    //                 ],
    //                 [
    //                     {text: 'üõ° [ü´Å 50]', callback_data: '{"q": "b_a", "a": "block"}'},
    //                 ],
    //             ]
    //         },});
    // }

    updateEndMessage(){
        this._bot.editMessageText(
            this.formEndGameMessageText(), 
            {inline_message_id: this._id, parse_mode: "HTML", reply_markup:{
                inline_keyboard:[
                    [
                        {text: '–°–¢–û–†–Ü–ù–ö–ê 1 –Ü–ó 5', callback_data: '{"q": "award_control", "a": "up"}'},
                    ],
                    [
                        {text: 'üó° –ú–ï–ß –°–õ–ê–í–ò', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'üëû –†–í–ê–ù–ò–ô –ë–û–¢–Ü–ù–û–ö –Ü–°–¢–Ü–ù–ò', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'ü™° –Ü–ì–õ–ê –ö–û–©–Ñ–Ø', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'ü™ñ –®–õ–Ñ–ú –ì–û–õ–û–í–ê–°–¢–Ü–ö–ê', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: 'üß¢ –ö–Ñ–ü–ö–ê –ü–Ü–î–ê–†–ê–®–ö–ò', callback_data: '{"q": "award_control", "a": "up"}'},
                        {text: 'üñê –í–∑—è—Ç–∏', callback_data: '{"q": "award_control", "a": "down"}'},
                    ],
                    [
                        {text: '‚¨ÖÔ∏è', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                        {text: '‚û°Ô∏è', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                    ],
                    [
                        {text: '‚úãü§ö –í–∑—è—Ç–∏ –≤—Å–µ', callback_data: '{"q": "award_control", "a": "takeAll"}'},
                    ],
                    [
                        {text: 'üö™ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–π', callback_data: '{"q": "battle_control", "a": "end"}'},
                    ]
                ]
            },});
    }

    formEndGameMessageText(){
        return `<b>[${this.title}]</b>
–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: [${this.winner.lvl}] ${this.winner.name} [${this.winner.hp}/${this.winner.maxHP}]‚ù§Ô∏è!
--------------------–ù–∞–≥–æ—Ä–æ–¥–∞--------------------
$unconditionalReward
`
    }

    appendToHistory(text){
        this._history.push(text)
    }
}

// `[–û–≥—Ä–∞–±–ª—î–Ω—ñ—î]
// üî∏ [${firstOpponent.hero.lvl}] ${firstOpponent.hero.name} [${firstOpponent.hero.currentHP}/${firstOpponent.hero.maxHP}]‚ù§Ô∏è
// üåÄ [1] –Ø—â—é—Ä [40/50]‚ù§Ô∏è 
// --------------------–î—ñ—ó--------------------
// –ë–æ–π—á—ñ–Ω–∫–æ: –í–¥–∞—Ä–∏–≤ [–º–µ—á 1000 —ñ—Å—Ç–∏–Ω] –≤ –≥—Ä—É–¥–∏
// –Ø—â—ñ—Ä: –û—Ç—Ä–∏–º–∞–≤ 10 —É—Ä–æ–Ω–∞
// –Ø—â—ñ—Ä: –ó–Ω–µ–ø—Ä–∏—Ç–æ–º–Ω—ñ–≤
// `